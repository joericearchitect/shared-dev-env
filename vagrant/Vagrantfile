# -*- mode: ruby -*-
# vi: set ft=ruby :

unless Vagrant.has_plugin?("vagrant-docker-compose")
  system("vagrant plugin install vagrant-docker-compose")
  puts "Dependencies installed, please try the command again."
  exit
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  config.vm.provider :virtualbox do |vb|
    vb.name = "JRA Dev Environment"
    vb.customize ["modifyvm", :id, "--memory", "2000"]
  end

  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Define the default values
  #
  # These values will be used if the user has not provided an override environment variable.
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  #define default values for environment variables
  default_local_git_projects_dir = "~/dev-env/jra/git/"
  default_local_apps_dir = "~/dev-env/jra/apps/"
  default_local_maven_conf_dir = "~/dev-env/jra/maven/conf/"
  default_local_maven_repo_dir = "~/dev-env/jra/maven/.m2"
  default_local_aws_dir = "~/dev-env/jra/aws/"
  default_local_aws_key_file_dir = "~/dev-env/jra/aws-keys/"
  default_local_share_dir = "~/dev-env/jra/share/"

  default_vm_git_projects_dir = "/home/vagrant/git"
  default_vm_apps_dir = "/home/vagrant/workspace/apps"
  default_vm_maven_conf_dir = "/home/vagrant/workspace/maven/conf"
  default_vm_maven_repo_dir = "/home/vagrant/.m2"
  default_vm_aws_dir = "/home/vagrant/.aws"
  default_vm_aws_key_file_dir = "/home/vagrant/aws-keys"
  default_vm_share_dir = "/home/vagrant/share"

  default_aws_key_file_name = "jra-build.pem"
  
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Set Variables to be used for local machines and dev env VMs.
  #
  # If an override environment variable exists on the local machine, will use that.  Otherwise, will set a default for each variable.
  #
  # Users can customize their dev environment VM by eithe A - Setting override environment variables on their shell
  # or B - passing the variables to the vagrant up command.
  #
  # See this page for the override environment variable names:
  #    https://github.com/joericearchitect/shared-dev-env/tree/master/vagrant
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  local_git_projects_dir = ENV['JRA_DEV_ENV_LOCAL_GIT_PROJECTS_DIR'] ? ENV['JRA_DEV_ENV_LOCAL_GIT_PROJECTS_DIR'] : "#{default_local_git_projects_dir}"
  local_apps_dir = ENV['JRA_DEV_ENV_LOCAL_APPS_DIR'] ? ENV['JRA_DEV_ENV_LOCAL_APPS_DIR'] : "#{default_local_apps_dir}"
  local_maven_conf_dir = ENV['JRA_DEV_ENV_LOCAL_MAVEN_CONF_DIR'] ? ENV['JRA_DEV_ENV_LOCAL_MAVEN_CONF_DIR'] : "#{default_local_maven_conf_dir}"
  local_maven_repo_dir = ENV['JRA_DEV_ENV_LOCAL_MAVEN_REPO_DIR'] ? ENV['JRA_DEV_ENV_LOCAL_MAVEN_REPO_DIR'] : "#{default_local_maven_repo_dir}"
  local_aws_dir = ENV['JRA_DEV_ENV_LOCAL_AWS_DIR'] ? ENV['JRA_DEV_ENV_LOCAL_AWS_DIR'] : "#{default_local_aws_dir}"
  local_aws_key_file_dir = ENV['JRA_DEV_ENV_LOCAL_AWS_KEY_FILE_DIR'] ? ENV['JRA_DEV_ENV_LOCAL_AWS_KEY_FILE_DIR'] : "#{default_local_aws_key_file_dir}"
  local_share_dir = ENV['JRA_DEV_ENV_LOCAL_SHARE_DIR'] ? ENV['JRA_DEV_ENV_LOCAL_SHARE_DIR'] : "#{default_local_share_dir}"

  vm_git_projects_dir = ENV['JRA_DEV_ENV_VM_GIT_PROJECTS_DIR'] ? ENV['JRA_DEV_ENV_VM_GIT_PROJECTS_DIR'] : "#{default_vm_git_projects_dir}"
  vm_apps_dir = ENV['JRA_DEV_ENV_VM_APPS_DIR'] ? ENV['JRA_DEV_ENV_VM_APPS_DIR'] : "#{default_vm_apps_dir}"
  vm_maven_conf_dir = ENV['JRA_DEV_ENV_VM_MAVEN_CONF_DIR'] ? ENV['JRA_DEV_ENV_VM_MAVEN_CONF_DIR'] : "#{default_vm_maven_conf_dir}"
  vm_maven_repo_dir = ENV['JRA_DEV_ENV_VM_MAVEN_REPO_DIR'] ? ENV['JRA_DEV_ENV_VM_MAVEN_REPO_DIR'] : "#{default_vm_maven_repo_dir}"
  vm_aws_dir = ENV['JRA_DEV_ENV_VM_AWS_DIR'] ? ENV['JRA_DEV_ENV_VM_AWS_DIR'] : "#{default_vm_aws_dir}"
  vm_aws_key_file_dir = ENV['JRA_DEV_ENV_VM_AWS_KEY_FILE_DIR'] ? ENV['JRA_DEV_ENV_VM_AWS_KEY_FILE_DIR'] : "#{default_vm_aws_key_file_dir}"
  vm_share_dir = ENV['JRA_DEV_ENV_VM_SHARE_DIR'] ? ENV['JRA_DEV_ENV_VM_SHARE_DIR'] : "#{default_vm_share_dir}"

  aws_key_file_name = ENV['JRA_DEV_ENV_AWS_KEY_FILE_NAME'] ? ENV['JRA_DEV_ENV_AWS_KEY_FILE_NAME'] : "#{default_aws_key_file_name}"
  
  vm_aws_key_file_path = ENV['JRA_DEV_ENV_VM_AWS_KEY_FILE_PATH'] ? ENV['JRA_DEV_ENV_AWS_KEY_FILE_NAME'] : "#{vm_aws_key_file_dir}/#{aws_key_file_name}"

  vm_aws_access_key_id = ENV['JRA_AWS_ACCESS_KEY']
  vm_aws_secret_access_key = ENV['JRA_AWS_SECRET_KEY']


  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Export the environment variables to the dev-env VM.
  #
  # Note:  the env variable names set in the VM will not be the same as the ones set in the local enviornment.
  # See this page for what env variables will be set on the VM.  And what environment variables they map to on the local machine:
  #    https://github.com/joericearchitect/shared-dev-env/tree/master/vagrant
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  config.vm.provision :shell, inline: "rm -f /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export GIT_PROJECTS_DIR=#{vm_git_projects_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export APPS_DIR=#{vm_apps_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export MAVEN_CONF_DIR=#{vm_maven_conf_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export MAVEN_REPO_DIR=#{vm_maven_repo_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_DIR=#{vm_aws_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_KEY_FILE_DIR=#{vm_aws_key_file_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_KEY_FILE_NAME=#{aws_key_file_name}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_KEY_FILE_PATH=#{vm_aws_key_file_path}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export SHARE_DIR=#{vm_share_dir}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"

  config.vm.provision :shell, inline: "echo \"export AWS_ACCESS_KEY=#{vm_aws_access_key_id}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export AWS_SECRET_KEY=#{vm_aws_secret_access_key}\" >> /etc/profile.d/dev-env-vars.sh", run: "always"

  config.vm.provision :shell, inline: "echo \"export SCRIPTS_DIR_INFRA_GLOBAL=$GIT_PROJECTS_DIR/shared-infra/scripts\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export SCRIPTS_DIR_INFRA_DOCKER=$SCRIPTS_DIR_INFRA_GLOBAL/docker\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export SCRIPTS_DIR_INFRA_PYTHON=$SCRIPTS_DIR_INFRA_GLOBAL/docker\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  
  config.vm.provision :shell, inline: "echo \"export SCRIPTS_DIR_INFRA_DEV_ENV=$GIT_PROJECTS_DIR/shared-dev-env/scripts\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export SCRIPTS_DIR_INFRA_DEV_ENV_LOCAL=$GIT_PROJECTS_DIR/shared-dev-env/scripts/local-machine\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export SCRIPTS_DIR_INFRA_DEV_ENV_VM=$GIT_PROJECTS_DIR/shared-dev-env/scripts/remote-dev-vm\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  
  config.vm.provision :shell, inline: "echo \"export SCRIPTS_DIR_SITE_JARCH=$GIT_PROJECTS_DIR/site-joe-rice-architect/devops/scripts\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  config.vm.provision :shell, inline: "echo \"export SCRIPTS_DIR_APP_MINECAT=$GIT_PROJECTS_DIR/app-mine-the-catalog/devops/scripts\" >> /etc/profile.d/dev-env-vars.sh", run: "always"

  config.vm.provision :shell, inline: "echo \"export PATH=$PATH:$SCRIPTS_DIR_SITE_JARCH:$SCRIPTS_DIR_APP_MINECAT:$SCRIPTS_DIR_INFRA_DOCKER:$SCRIPTS_DIR_INFRA_GLOBAL:$SCRIPTS_DIR_INFRA_DEV_ENV:$SCRIPTS_DIR_INFRA_DEV_ENV_LOCAL:$SCRIPTS_DIR_INFRA_DEV_ENV_VM\" >> /etc/profile.d/dev-env-vars.sh", run: "always"
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  # Set up synced folders between local machine and dev-env VM.
  #
  # Note:  the env variable names set in the VM will not be the same as the ones set in the local enviornment.
  # See this page for what env variables will be set on the VM.  And what environment variables they map to on the local machine:
  #    https://github.com/joericearchitect/shared-dev-env/tree/master/vagrant
  # -----------------------------------------------------------------------------------------------------------------------------------------------
  config.vm.synced_folder "#{local_git_projects_dir}", "#{vm_git_projects_dir}", create: true
  config.vm.synced_folder "#{local_apps_dir}", "#{vm_apps_dir}", create: true
  config.vm.synced_folder "#{local_maven_conf_dir}", "#{vm_maven_conf_dir}", create: true
  config.vm.synced_folder "#{local_maven_repo_dir}", "#{vm_maven_repo_dir}", create: true
  config.vm.synced_folder "#{local_aws_dir}", "#{vm_aws_dir}", create: true
  config.vm.synced_folder "#{local_aws_key_file_dir}", "#{vm_aws_key_file_dir}", create: true, mount_options: ["dmode=777", "fmode=400"]
  config.vm.synced_folder "#{local_share_dir}", "#{vm_share_dir}", create: true

  config.vm.provision :shell, inline: 'wget --no-check-certificate https://github.com/aglover/ubuntu-equip/raw/master/equip_java8.sh && bash equip_java8.sh'

  config.vm.provision :docker
  config.vm.provision :docker_compose

  config.vm.provision "shell", path: "provision/setup.sh"

#  box.vm.provision :shell do |s|
#    s.env = {AWS_ACCESS_KEY:ENV['AWS_ACCESS_KEY'], AWS_SECRET_KEY:ENV['AWS_SECRET_KEY']}
#    s.path = 'provision/setup.sh'
#  end

 # config.vm.network "forwarded_port", guest: 8080, host: 8080
  config.vm.network "forwarded_port", guest: 8180, host: 8180
  config.vm.network "forwarded_port", guest: 8280, host: 8280
  config.vm.network "forwarded_port", guest: 8380, host: 8380
  config.vm.network "forwarded_port", guest: 8480, host: 8480
  config.vm.network "forwarded_port", guest: 8580, host: 8580
  config.vm.network "forwarded_port", guest: 8680, host: 8680
  config.vm.network "forwarded_port", guest: 8780, host: 8780
  config.vm.network "forwarded_port", guest: 8880, host: 8880
  config.vm.network "forwarded_port", guest: 8980, host: 8980

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
